// Code generated by protoc-gen-form. DO NOT EDIT.
// Source: resource.proto

package pb

import (
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	url "net/url"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*CreateResourceRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreateResourceResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ResourceCreateResult)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteResourceRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DeleteResourceResponse)(nil)

// CreateResourceRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreateResourceRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "engine":
				m.Engine = vals[0]
			case "uuid":
				m.Uuid = vals[0]
			case "plan":
				m.Plan = vals[0]
			case "az":
				m.Az = vals[0]
			case "callback":
				m.Callback = vals[0]
			}
		}
	}
	return nil
}

// CreateResourceResponse implement urlenc.URLValuesUnmarshaler.
func (m *CreateResourceResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &ResourceCreateResult{}
				}
			case "data.id":
				if m.Data == nil {
					m.Data = &ResourceCreateResult{}
				}
				m.Data.Id = vals[0]
			case "data.createdAt":
				if m.Data == nil {
					m.Data = &ResourceCreateResult{}
				}
				m.Data.CreatedAt = vals[0]
			case "data.updateAt":
				if m.Data == nil {
					m.Data = &ResourceCreateResult{}
				}
				m.Data.UpdateAt = vals[0]
			case "data.status":
				if m.Data == nil {
					m.Data = &ResourceCreateResult{}
				}
				m.Data.Status = vals[0]
			}
		}
	}
	return nil
}

// ResourceCreateResult implement urlenc.URLValuesUnmarshaler.
func (m *ResourceCreateResult) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "createdAt":
				m.CreatedAt = vals[0]
			case "updateAt":
				m.UpdateAt = vals[0]
			case "status":
				m.Status = vals[0]
			}
		}
	}
	return nil
}

// DeleteResourceRequest implement urlenc.URLValuesUnmarshaler.
func (m *DeleteResourceRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "engine":
				m.Engine = vals[0]
			case "id":
				m.Id = vals[0]
			}
		}
	}
	return nil
}

// DeleteResourceResponse implement urlenc.URLValuesUnmarshaler.
func (m *DeleteResourceResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Data = val
			}
		}
	}
	return nil
}
