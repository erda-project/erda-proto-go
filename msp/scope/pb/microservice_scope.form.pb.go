// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: microservice_scope.proto

package pb

import (
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	url "net/url"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*EncryptMicroserviceScopeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*EncryptMicroserviceScopeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DecryptMicroserviceScopeRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DecryptMicroserviceScopeResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Scope)(nil)

// EncryptMicroserviceScopeRequest implement urlenc.URLValuesUnmarshaler.
func (m *EncryptMicroserviceScopeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "projectID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "env":
				m.Env = vals[0]
			}
		}
	}
	return nil
}

// EncryptMicroserviceScopeResponse implement urlenc.URLValuesUnmarshaler.
func (m *EncryptMicroserviceScopeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.projectID":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Scope.ProjectID = val
			case "scope.env":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Env = vals[0]
			}
		}
	}
	return nil
}

// DecryptMicroserviceScopeRequest implement urlenc.URLValuesUnmarshaler.
func (m *DecryptMicroserviceScopeRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scopeID":
				m.ScopeID = vals[0]
			}
		}
	}
	return nil
}

// DecryptMicroserviceScopeResponse implement urlenc.URLValuesUnmarshaler.
func (m *DecryptMicroserviceScopeResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
			case "scope.id":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Id = vals[0]
			case "scope.projectID":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Scope.ProjectID = val
			case "scope.env":
				if m.Scope == nil {
					m.Scope = &Scope{}
				}
				m.Scope.Env = vals[0]
			}
		}
	}
	return nil
}

// Scope implement urlenc.URLValuesUnmarshaler.
func (m *Scope) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "projectID":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ProjectID = val
			case "env":
				m.Env = vals[0]
			}
		}
	}
	return nil
}
