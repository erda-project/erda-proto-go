// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: microservice_scope.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MicroserviceScopeServiceClient is the client API for MicroserviceScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceScopeServiceClient interface {
	EncryptMicroserviceScope(ctx context.Context, in *EncryptMicroserviceScopeRequest, opts ...grpc.CallOption) (*EncryptMicroserviceScopeResponse, error)
	DecryptMicroserviceScope(ctx context.Context, in *DecryptMicroserviceScopeRequest, opts ...grpc.CallOption) (*DecryptMicroserviceScopeResponse, error)
}

type microserviceScopeServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMicroserviceScopeServiceClient(cc grpc1.ClientConnInterface) MicroserviceScopeServiceClient {
	return &microserviceScopeServiceClient{cc}
}

func (c *microserviceScopeServiceClient) EncryptMicroserviceScope(ctx context.Context, in *EncryptMicroserviceScopeRequest, opts ...grpc.CallOption) (*EncryptMicroserviceScopeResponse, error) {
	out := new(EncryptMicroserviceScopeResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.scope.MicroserviceScopeService/EncryptMicroserviceScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceScopeServiceClient) DecryptMicroserviceScope(ctx context.Context, in *DecryptMicroserviceScopeRequest, opts ...grpc.CallOption) (*DecryptMicroserviceScopeResponse, error) {
	out := new(DecryptMicroserviceScopeResponse)
	err := c.cc.Invoke(ctx, "/erda.msp.scope.MicroserviceScopeService/DecryptMicroserviceScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceScopeServiceServer is the server API for MicroserviceScopeService service.
// All implementations should embed UnimplementedMicroserviceScopeServiceServer
// for forward compatibility
type MicroserviceScopeServiceServer interface {
	EncryptMicroserviceScope(context.Context, *EncryptMicroserviceScopeRequest) (*EncryptMicroserviceScopeResponse, error)
	DecryptMicroserviceScope(context.Context, *DecryptMicroserviceScopeRequest) (*DecryptMicroserviceScopeResponse, error)
}

// UnimplementedMicroserviceScopeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMicroserviceScopeServiceServer struct {
}

func (*UnimplementedMicroserviceScopeServiceServer) EncryptMicroserviceScope(context.Context, *EncryptMicroserviceScopeRequest) (*EncryptMicroserviceScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptMicroserviceScope not implemented")
}
func (*UnimplementedMicroserviceScopeServiceServer) DecryptMicroserviceScope(context.Context, *DecryptMicroserviceScopeRequest) (*DecryptMicroserviceScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptMicroserviceScope not implemented")
}

func RegisterMicroserviceScopeServiceServer(s grpc1.ServiceRegistrar, srv MicroserviceScopeServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MicroserviceScopeService_serviceDesc(srv, opts...), srv)
}

var _MicroserviceScopeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.msp.scope.MicroserviceScopeService",
	HandlerType: (*MicroserviceScopeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "microservice_scope.proto",
}

func _get_MicroserviceScopeService_serviceDesc(srv MicroserviceScopeServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MicroserviceScopeService_EncryptMicroserviceScope_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.EncryptMicroserviceScope(ctx, req.(*EncryptMicroserviceScopeRequest))
	}
	var _MicroserviceScopeService_EncryptMicroserviceScope_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MicroserviceScopeService_EncryptMicroserviceScope_info = transport.NewServiceInfo("erda.msp.scope.MicroserviceScopeService", "EncryptMicroserviceScope", srv)
		_MicroserviceScopeService_EncryptMicroserviceScope_Handler = h.Interceptor(_MicroserviceScopeService_EncryptMicroserviceScope_Handler)
	}

	_MicroserviceScopeService_DecryptMicroserviceScope_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DecryptMicroserviceScope(ctx, req.(*DecryptMicroserviceScopeRequest))
	}
	var _MicroserviceScopeService_DecryptMicroserviceScope_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MicroserviceScopeService_DecryptMicroserviceScope_info = transport.NewServiceInfo("erda.msp.scope.MicroserviceScopeService", "DecryptMicroserviceScope", srv)
		_MicroserviceScopeService_DecryptMicroserviceScope_Handler = h.Interceptor(_MicroserviceScopeService_DecryptMicroserviceScope_Handler)
	}

	var serviceDesc = _MicroserviceScopeService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "EncryptMicroserviceScope",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(EncryptMicroserviceScopeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MicroserviceScopeServiceServer).EncryptMicroserviceScope(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MicroserviceScopeService_EncryptMicroserviceScope_info)
				}
				if interceptor == nil {
					return _MicroserviceScopeService_EncryptMicroserviceScope_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.scope.MicroserviceScopeService/EncryptMicroserviceScope",
				}
				return interceptor(ctx, in, info, _MicroserviceScopeService_EncryptMicroserviceScope_Handler)
			},
		},
		{
			MethodName: "DecryptMicroserviceScope",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DecryptMicroserviceScopeRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MicroserviceScopeServiceServer).DecryptMicroserviceScope(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MicroserviceScopeService_DecryptMicroserviceScope_info)
				}
				if interceptor == nil {
					return _MicroserviceScopeService_DecryptMicroserviceScope_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.msp.scope.MicroserviceScopeService/DecryptMicroserviceScope",
				}
				return interceptor(ctx, in, info, _MicroserviceScopeService_DecryptMicroserviceScope_Handler)
			},
		},
	}
	return &serviceDesc
}
