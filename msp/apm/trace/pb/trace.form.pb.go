// Code generated by protoc-gen-form. DO NOT EDIT.
// Source: trace.proto

package pb

import (
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	url "net/url"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetSpansRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTracesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetSpansResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetTracesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Span)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Trace)(nil)

// GetSpansRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetSpansRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "traceId":
				m.TraceId = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "limit":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Limit = val
			}
		}
	}
	return nil
}

// GetTracesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetTracesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scopeId":
				m.ScopeId = vals[0]
			case "applicationId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.ApplicationId = val
			case "status":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Status = val
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			case "endTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime = val
			case "limit":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Limit = val
			}
		}
	}
	return nil
}

// GetSpansResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetSpansResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetTracesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetTracesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Span implement urlenc.URLValuesUnmarshaler.
func (m *Span) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "traceId":
				m.TraceId = vals[0]
			case "operationName":
				m.OperationName = vals[0]
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			case "endTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.EndTime = val
			case "parentSpanId":
				m.ParentSpanId = vals[0]
			case "timestamp":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Timestamp = val
			}
		}
	}
	return nil
}

// Trace implement urlenc.URLValuesUnmarshaler.
func (m *Trace) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "elapsed":
				val, err := strconv.ParseFloat(vals[0], 64)
				if err != nil {
					return err
				}
				m.Elapsed = val
			case "startTime":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.StartTime = val
			}
		}
	}
	return nil
}
