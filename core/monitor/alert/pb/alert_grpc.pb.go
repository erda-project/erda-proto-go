// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: alert.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServiceClient interface {
	QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error)
	QueryOrgCustomizeNotifyTarget(ctx context.Context, in *QueryOrgCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlert(ctx context.Context, in *QueryCustomizeAlertRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertResponse, error)
	GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error)
	GetCustomizeAlertDetail(ctx context.Context, in *GetCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetCustomizeAlertDetailResponse, error)
	CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error)
	QueryOrgCustomizeMetric(ctx context.Context, in *QueryOrgCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeMetricResponse, error)
	QueryOrgCustomizeAlerts(ctx context.Context, in *QueryOrgCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeAlertsResponse, error)
	GetOrgCustomizeAlertDetail(ctx context.Context, in *GetOrgCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgCustomizeAlertDetailResponse, error)
	CreateOrgCustomizeAlert(ctx context.Context, in *CreateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlert(ctx context.Context, in *UpdateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlertEnable(ctx context.Context, in *UpdateOrgCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertEnableResponse, error)
	DeleteOrgCustomizeAlert(ctx context.Context, in *DeleteOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteOrgCustomizeAlertResponse, error)
	QueryDashboardByAlert(ctx context.Context, in *QueryDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryDashboardByAlertResponse, error)
	QueryOrgDashboardByAlert(ctx context.Context, in *QueryOrgDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryOrgDashboardByAlertResponse, error)
	QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error)
	QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertsResponse, error)
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
	GetAlertDetail(ctx context.Context, in *GetAlertDetailRequest, opts ...grpc.CallOption) (*GetAlertDetailResponse, error)
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error)
	UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error)
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error)
	QueryOrgAlertRule(ctx context.Context, in *QueryOrgAlertRuleRequest, opts ...grpc.CallOption) (*QueryOrgAlertRuleResponse, error)
	QueryOrgAlert(ctx context.Context, in *QueryOrgAlertRequest, opts ...grpc.CallOption) (*QueryOrgAlertResponse, error)
	GetOrgAlertDetail(ctx context.Context, in *GetOrgAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgAlertDetailResponse, error)
	CreateOrgAlert(ctx context.Context, in *CreateOrgAlertRequest, opts ...grpc.CallOption) (*CreateOrgAlertResponse, error)
	UpdateOrgAlert(ctx context.Context, in *UpdateOrgAlertRequest, opts ...grpc.CallOption) (*UpdateOrgAlertResponse, error)
	UpdateOrgAlertEnable(ctx context.Context, in *UpdateOrgAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgAlertEnableResponse, error)
	DeleteOrgAlert(ctx context.Context, in *DeleteOrgAlertRequest, opts ...grpc.CallOption) (*DeleteOrgAlertResponse, error)
	GetAlertRecordAttr(ctx context.Context, in *GetAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrResponse, error)
	QueryAlertRecord(ctx context.Context, in *QueryAlertRecordRequest, opts ...grpc.CallOption) (*QueryAlertRecordResponse, error)
	GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error)
	QueryAlertHistory(ctx context.Context, in *QueryAlertHistoryRequest, opts ...grpc.CallOption) (*QueryAlertHistoryResponse, error)
	CreateAlertIssue(ctx context.Context, in *CreateAlertIssueRequest, opts ...grpc.CallOption) (*CreateAlertIssueResponse, error)
	UpdateAlertIssue(ctx context.Context, in *UpdateAlertIssueRequest, opts ...grpc.CallOption) (*UpdateAlertIssueResponse, error)
	GetOrgAlertRecordAttr(ctx context.Context, in *GetOrgAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordAttrResponse, error)
	QueryOrgAlertRecord(ctx context.Context, in *QueryOrgAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error)
	QueryOrgHostsAlertRecord(ctx context.Context, in *QueryOrgHostsAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error)
	GetOrgAlertRecord(ctx context.Context, in *GetOrgAlertRecordRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordResponse, error)
	QueryOrgAlertHistory(ctx context.Context, in *QueryOrgAlertHistoryRequest, opts ...grpc.CallOption) (*QueryOrgAlertHistoryResponse, error)
	CreateOrgAlertIssue(ctx context.Context, in *CreateOrgAlertIssueRequest, opts ...grpc.CallOption) (*CreateOrgAlertIssueResponse, error)
	UpdateOrgAlertIssue(ctx context.Context, in *UpdateOrgAlertIssueRequest, opts ...grpc.CallOption) (*UpdateOrgAlertIssueResponse, error)
}

type monitorServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc1.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) QueryCustomizeMetric(ctx context.Context, in *QueryCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryCustomizeMetricResponse, error) {
	out := new(QueryCustomizeMetricResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryCustomizeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryCustomizeNotifyTarget(ctx context.Context, in *QueryCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryCustomizeNotifyTargetResponse, error) {
	out := new(QueryCustomizeNotifyTargetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryCustomizeNotifyTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgCustomizeNotifyTarget(ctx context.Context, in *QueryOrgCustomizeNotifyTargetRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeNotifyTargetResponse, error) {
	out := new(QueryOrgCustomizeNotifyTargetResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeNotifyTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryCustomizeAlert(ctx context.Context, in *QueryCustomizeAlertRequest, opts ...grpc.CallOption) (*QueryCustomizeAlertResponse, error) {
	out := new(QueryCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetCustomizeAlert(ctx context.Context, in *GetCustomizeAlertRequest, opts ...grpc.CallOption) (*GetCustomizeAlertResponse, error) {
	out := new(GetCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetCustomizeAlertDetail(ctx context.Context, in *GetCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetCustomizeAlertDetailResponse, error) {
	out := new(GetCustomizeAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetCustomizeAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateCustomizeAlert(ctx context.Context, in *CreateCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateCustomizeAlertResponse, error) {
	out := new(CreateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateCustomizeAlert(ctx context.Context, in *UpdateCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertResponse, error) {
	out := new(UpdateCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateCustomizeAlertEnable(ctx context.Context, in *UpdateCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateCustomizeAlertEnableResponse, error) {
	out := new(UpdateCustomizeAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateCustomizeAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) DeleteCustomizeAlert(ctx context.Context, in *DeleteCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteCustomizeAlertResponse, error) {
	out := new(DeleteCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/DeleteCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgCustomizeMetric(ctx context.Context, in *QueryOrgCustomizeMetricRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeMetricResponse, error) {
	out := new(QueryOrgCustomizeMetricResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgCustomizeAlerts(ctx context.Context, in *QueryOrgCustomizeAlertsRequest, opts ...grpc.CallOption) (*QueryOrgCustomizeAlertsResponse, error) {
	out := new(QueryOrgCustomizeAlertsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetOrgCustomizeAlertDetail(ctx context.Context, in *GetOrgCustomizeAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgCustomizeAlertDetailResponse, error) {
	out := new(GetOrgCustomizeAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetOrgCustomizeAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateOrgCustomizeAlert(ctx context.Context, in *CreateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*CreateOrgCustomizeAlertResponse, error) {
	out := new(CreateOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateOrgCustomizeAlert(ctx context.Context, in *UpdateOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertResponse, error) {
	out := new(UpdateOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateOrgCustomizeAlertEnable(ctx context.Context, in *UpdateOrgCustomizeAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgCustomizeAlertEnableResponse, error) {
	out := new(UpdateOrgCustomizeAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateOrgCustomizeAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) DeleteOrgCustomizeAlert(ctx context.Context, in *DeleteOrgCustomizeAlertRequest, opts ...grpc.CallOption) (*DeleteOrgCustomizeAlertResponse, error) {
	out := new(DeleteOrgCustomizeAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/DeleteOrgCustomizeAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryDashboardByAlert(ctx context.Context, in *QueryDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryDashboardByAlertResponse, error) {
	out := new(QueryDashboardByAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryDashboardByAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgDashboardByAlert(ctx context.Context, in *QueryOrgDashboardByAlertRequest, opts ...grpc.CallOption) (*QueryOrgDashboardByAlertResponse, error) {
	out := new(QueryOrgDashboardByAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgDashboardByAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryAlertRule(ctx context.Context, in *QueryAlertRuleRequest, opts ...grpc.CallOption) (*QueryAlertRuleResponse, error) {
	out := new(QueryAlertRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryAlertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryAlert(ctx context.Context, in *QueryAlertRequest, opts ...grpc.CallOption) (*QueryAlertsResponse, error) {
	out := new(QueryAlertsResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetAlertDetail(ctx context.Context, in *GetAlertDetailRequest, opts ...grpc.CallOption) (*GetAlertDetailResponse, error) {
	out := new(GetAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*CreateAlertResponse, error) {
	out := new(CreateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*UpdateAlertResponse, error) {
	out := new(UpdateAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateAlertEnable(ctx context.Context, in *UpdateAlertEnableRequest, opts ...grpc.CallOption) (*UpdateAlertEnableResponse, error) {
	out := new(UpdateAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*DeleteAlertResponse, error) {
	out := new(DeleteAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgAlertRule(ctx context.Context, in *QueryOrgAlertRuleRequest, opts ...grpc.CallOption) (*QueryOrgAlertRuleResponse, error) {
	out := new(QueryOrgAlertRuleResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgAlertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgAlert(ctx context.Context, in *QueryOrgAlertRequest, opts ...grpc.CallOption) (*QueryOrgAlertResponse, error) {
	out := new(QueryOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetOrgAlertDetail(ctx context.Context, in *GetOrgAlertDetailRequest, opts ...grpc.CallOption) (*GetOrgAlertDetailResponse, error) {
	out := new(GetOrgAlertDetailResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetOrgAlertDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateOrgAlert(ctx context.Context, in *CreateOrgAlertRequest, opts ...grpc.CallOption) (*CreateOrgAlertResponse, error) {
	out := new(CreateOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateOrgAlert(ctx context.Context, in *UpdateOrgAlertRequest, opts ...grpc.CallOption) (*UpdateOrgAlertResponse, error) {
	out := new(UpdateOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateOrgAlertEnable(ctx context.Context, in *UpdateOrgAlertEnableRequest, opts ...grpc.CallOption) (*UpdateOrgAlertEnableResponse, error) {
	out := new(UpdateOrgAlertEnableResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateOrgAlertEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) DeleteOrgAlert(ctx context.Context, in *DeleteOrgAlertRequest, opts ...grpc.CallOption) (*DeleteOrgAlertResponse, error) {
	out := new(DeleteOrgAlertResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/DeleteOrgAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetAlertRecordAttr(ctx context.Context, in *GetAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetAlertRecordAttrResponse, error) {
	out := new(GetAlertRecordAttrResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetAlertRecordAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryAlertRecord(ctx context.Context, in *QueryAlertRecordRequest, opts ...grpc.CallOption) (*QueryAlertRecordResponse, error) {
	out := new(QueryAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetAlertRecord(ctx context.Context, in *GetAlertRecordRequest, opts ...grpc.CallOption) (*GetAlertRecordResponse, error) {
	out := new(GetAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryAlertHistory(ctx context.Context, in *QueryAlertHistoryRequest, opts ...grpc.CallOption) (*QueryAlertHistoryResponse, error) {
	out := new(QueryAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateAlertIssue(ctx context.Context, in *CreateAlertIssueRequest, opts ...grpc.CallOption) (*CreateAlertIssueResponse, error) {
	out := new(CreateAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateAlertIssue(ctx context.Context, in *UpdateAlertIssueRequest, opts ...grpc.CallOption) (*UpdateAlertIssueResponse, error) {
	out := new(UpdateAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetOrgAlertRecordAttr(ctx context.Context, in *GetOrgAlertRecordAttrRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordAttrResponse, error) {
	out := new(GetOrgAlertRecordAttrResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetOrgAlertRecordAttr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgAlertRecord(ctx context.Context, in *QueryOrgAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error) {
	out := new(QueryOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgHostsAlertRecord(ctx context.Context, in *QueryOrgHostsAlertRecordRequest, opts ...grpc.CallOption) (*QueryOrgAlertRecordResponse, error) {
	out := new(QueryOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgHostsAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) GetOrgAlertRecord(ctx context.Context, in *GetOrgAlertRecordRequest, opts ...grpc.CallOption) (*GetOrgAlertRecordResponse, error) {
	out := new(GetOrgAlertRecordResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/GetOrgAlertRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) QueryOrgAlertHistory(ctx context.Context, in *QueryOrgAlertHistoryRequest, opts ...grpc.CallOption) (*QueryOrgAlertHistoryResponse, error) {
	out := new(QueryOrgAlertHistoryResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/QueryOrgAlertHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) CreateOrgAlertIssue(ctx context.Context, in *CreateOrgAlertIssueRequest, opts ...grpc.CallOption) (*CreateOrgAlertIssueResponse, error) {
	out := new(CreateOrgAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/CreateOrgAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) UpdateOrgAlertIssue(ctx context.Context, in *UpdateOrgAlertIssueRequest, opts ...grpc.CallOption) (*UpdateOrgAlertIssueResponse, error) {
	out := new(UpdateOrgAlertIssueResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.alert.MonitorService/UpdateOrgAlertIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServiceServer is the server API for MonitorService service.
// All implementations should embed UnimplementedMonitorServiceServer
// for forward compatibility
type MonitorServiceServer interface {
	QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error)
	QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error)
	QueryOrgCustomizeNotifyTarget(context.Context, *QueryOrgCustomizeNotifyTargetRequest) (*QueryOrgCustomizeNotifyTargetResponse, error)
	QueryCustomizeAlert(context.Context, *QueryCustomizeAlertRequest) (*QueryCustomizeAlertResponse, error)
	GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error)
	GetCustomizeAlertDetail(context.Context, *GetCustomizeAlertDetailRequest) (*GetCustomizeAlertDetailResponse, error)
	CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error)
	UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error)
	UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error)
	DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error)
	QueryOrgCustomizeMetric(context.Context, *QueryOrgCustomizeMetricRequest) (*QueryOrgCustomizeMetricResponse, error)
	QueryOrgCustomizeAlerts(context.Context, *QueryOrgCustomizeAlertsRequest) (*QueryOrgCustomizeAlertsResponse, error)
	GetOrgCustomizeAlertDetail(context.Context, *GetOrgCustomizeAlertDetailRequest) (*GetOrgCustomizeAlertDetailResponse, error)
	CreateOrgCustomizeAlert(context.Context, *CreateOrgCustomizeAlertRequest) (*CreateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlert(context.Context, *UpdateOrgCustomizeAlertRequest) (*UpdateOrgCustomizeAlertResponse, error)
	UpdateOrgCustomizeAlertEnable(context.Context, *UpdateOrgCustomizeAlertEnableRequest) (*UpdateOrgCustomizeAlertEnableResponse, error)
	DeleteOrgCustomizeAlert(context.Context, *DeleteOrgCustomizeAlertRequest) (*DeleteOrgCustomizeAlertResponse, error)
	QueryDashboardByAlert(context.Context, *QueryDashboardByAlertRequest) (*QueryDashboardByAlertResponse, error)
	QueryOrgDashboardByAlert(context.Context, *QueryOrgDashboardByAlertRequest) (*QueryOrgDashboardByAlertResponse, error)
	QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error)
	QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertsResponse, error)
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	GetAlertDetail(context.Context, *GetAlertDetailRequest) (*GetAlertDetailResponse, error)
	CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error)
	UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error)
	DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error)
	QueryOrgAlertRule(context.Context, *QueryOrgAlertRuleRequest) (*QueryOrgAlertRuleResponse, error)
	QueryOrgAlert(context.Context, *QueryOrgAlertRequest) (*QueryOrgAlertResponse, error)
	GetOrgAlertDetail(context.Context, *GetOrgAlertDetailRequest) (*GetOrgAlertDetailResponse, error)
	CreateOrgAlert(context.Context, *CreateOrgAlertRequest) (*CreateOrgAlertResponse, error)
	UpdateOrgAlert(context.Context, *UpdateOrgAlertRequest) (*UpdateOrgAlertResponse, error)
	UpdateOrgAlertEnable(context.Context, *UpdateOrgAlertEnableRequest) (*UpdateOrgAlertEnableResponse, error)
	DeleteOrgAlert(context.Context, *DeleteOrgAlertRequest) (*DeleteOrgAlertResponse, error)
	GetAlertRecordAttr(context.Context, *GetAlertRecordAttrRequest) (*GetAlertRecordAttrResponse, error)
	QueryAlertRecord(context.Context, *QueryAlertRecordRequest) (*QueryAlertRecordResponse, error)
	GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error)
	QueryAlertHistory(context.Context, *QueryAlertHistoryRequest) (*QueryAlertHistoryResponse, error)
	CreateAlertIssue(context.Context, *CreateAlertIssueRequest) (*CreateAlertIssueResponse, error)
	UpdateAlertIssue(context.Context, *UpdateAlertIssueRequest) (*UpdateAlertIssueResponse, error)
	GetOrgAlertRecordAttr(context.Context, *GetOrgAlertRecordAttrRequest) (*GetOrgAlertRecordAttrResponse, error)
	QueryOrgAlertRecord(context.Context, *QueryOrgAlertRecordRequest) (*QueryOrgAlertRecordResponse, error)
	QueryOrgHostsAlertRecord(context.Context, *QueryOrgHostsAlertRecordRequest) (*QueryOrgAlertRecordResponse, error)
	GetOrgAlertRecord(context.Context, *GetOrgAlertRecordRequest) (*GetOrgAlertRecordResponse, error)
	QueryOrgAlertHistory(context.Context, *QueryOrgAlertHistoryRequest) (*QueryOrgAlertHistoryResponse, error)
	CreateOrgAlertIssue(context.Context, *CreateOrgAlertIssueRequest) (*CreateOrgAlertIssueResponse, error)
	UpdateOrgAlertIssue(context.Context, *UpdateOrgAlertIssueRequest) (*UpdateOrgAlertIssueResponse, error)
}

// UnimplementedMonitorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (*UnimplementedMonitorServiceServer) QueryCustomizeMetric(context.Context, *QueryCustomizeMetricRequest) (*QueryCustomizeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeMetric not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryCustomizeNotifyTarget(context.Context, *QueryCustomizeNotifyTargetRequest) (*QueryCustomizeNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeNotifyTarget not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgCustomizeNotifyTarget(context.Context, *QueryOrgCustomizeNotifyTargetRequest) (*QueryOrgCustomizeNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeNotifyTarget not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryCustomizeAlert(context.Context, *QueryCustomizeAlertRequest) (*QueryCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetCustomizeAlert(context.Context, *GetCustomizeAlertRequest) (*GetCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetCustomizeAlertDetail(context.Context, *GetCustomizeAlertDetailRequest) (*GetCustomizeAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomizeAlertDetail not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateCustomizeAlert(context.Context, *CreateCustomizeAlertRequest) (*CreateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateCustomizeAlert(context.Context, *UpdateCustomizeAlertRequest) (*UpdateCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateCustomizeAlertEnable(context.Context, *UpdateCustomizeAlertEnableRequest) (*UpdateCustomizeAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomizeAlertEnable not implemented")
}
func (*UnimplementedMonitorServiceServer) DeleteCustomizeAlert(context.Context, *DeleteCustomizeAlertRequest) (*DeleteCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgCustomizeMetric(context.Context, *QueryOrgCustomizeMetricRequest) (*QueryOrgCustomizeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeMetric not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgCustomizeAlerts(context.Context, *QueryOrgCustomizeAlertsRequest) (*QueryOrgCustomizeAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgCustomizeAlerts not implemented")
}
func (*UnimplementedMonitorServiceServer) GetOrgCustomizeAlertDetail(context.Context, *GetOrgCustomizeAlertDetailRequest) (*GetOrgCustomizeAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgCustomizeAlertDetail not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateOrgCustomizeAlert(context.Context, *CreateOrgCustomizeAlertRequest) (*CreateOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateOrgCustomizeAlert(context.Context, *UpdateOrgCustomizeAlertRequest) (*UpdateOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateOrgCustomizeAlertEnable(context.Context, *UpdateOrgCustomizeAlertEnableRequest) (*UpdateOrgCustomizeAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgCustomizeAlertEnable not implemented")
}
func (*UnimplementedMonitorServiceServer) DeleteOrgCustomizeAlert(context.Context, *DeleteOrgCustomizeAlertRequest) (*DeleteOrgCustomizeAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgCustomizeAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryDashboardByAlert(context.Context, *QueryDashboardByAlertRequest) (*QueryDashboardByAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDashboardByAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgDashboardByAlert(context.Context, *QueryOrgDashboardByAlertRequest) (*QueryOrgDashboardByAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgDashboardByAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryAlertRule(context.Context, *QueryAlertRuleRequest) (*QueryAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertRule not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryAlert(context.Context, *QueryAlertRequest) (*QueryAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetAlertDetail(context.Context, *GetAlertDetailRequest) (*GetAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertDetail not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateAlert(context.Context, *CreateAlertRequest) (*CreateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*UpdateAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateAlertEnable(context.Context, *UpdateAlertEnableRequest) (*UpdateAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertEnable not implemented")
}
func (*UnimplementedMonitorServiceServer) DeleteAlert(context.Context, *DeleteAlertRequest) (*DeleteAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgAlertRule(context.Context, *QueryOrgAlertRuleRequest) (*QueryOrgAlertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertRule not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgAlert(context.Context, *QueryOrgAlertRequest) (*QueryOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetOrgAlertDetail(context.Context, *GetOrgAlertDetailRequest) (*GetOrgAlertDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertDetail not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateOrgAlert(context.Context, *CreateOrgAlertRequest) (*CreateOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateOrgAlert(context.Context, *UpdateOrgAlertRequest) (*UpdateOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateOrgAlertEnable(context.Context, *UpdateOrgAlertEnableRequest) (*UpdateOrgAlertEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlertEnable not implemented")
}
func (*UnimplementedMonitorServiceServer) DeleteOrgAlert(context.Context, *DeleteOrgAlertRequest) (*DeleteOrgAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrgAlert not implemented")
}
func (*UnimplementedMonitorServiceServer) GetAlertRecordAttr(context.Context, *GetAlertRecordAttrRequest) (*GetAlertRecordAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecordAttr not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryAlertRecord(context.Context, *QueryAlertRecordRequest) (*QueryAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertRecord not implemented")
}
func (*UnimplementedMonitorServiceServer) GetAlertRecord(context.Context, *GetAlertRecordRequest) (*GetAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertRecord not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryAlertHistory(context.Context, *QueryAlertHistoryRequest) (*QueryAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAlertHistory not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateAlertIssue(context.Context, *CreateAlertIssueRequest) (*CreateAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertIssue not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateAlertIssue(context.Context, *UpdateAlertIssueRequest) (*UpdateAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertIssue not implemented")
}
func (*UnimplementedMonitorServiceServer) GetOrgAlertRecordAttr(context.Context, *GetOrgAlertRecordAttrRequest) (*GetOrgAlertRecordAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertRecordAttr not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgAlertRecord(context.Context, *QueryOrgAlertRecordRequest) (*QueryOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertRecord not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgHostsAlertRecord(context.Context, *QueryOrgHostsAlertRecordRequest) (*QueryOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgHostsAlertRecord not implemented")
}
func (*UnimplementedMonitorServiceServer) GetOrgAlertRecord(context.Context, *GetOrgAlertRecordRequest) (*GetOrgAlertRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAlertRecord not implemented")
}
func (*UnimplementedMonitorServiceServer) QueryOrgAlertHistory(context.Context, *QueryOrgAlertHistoryRequest) (*QueryOrgAlertHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgAlertHistory not implemented")
}
func (*UnimplementedMonitorServiceServer) CreateOrgAlertIssue(context.Context, *CreateOrgAlertIssueRequest) (*CreateOrgAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgAlertIssue not implemented")
}
func (*UnimplementedMonitorServiceServer) UpdateOrgAlertIssue(context.Context, *UpdateOrgAlertIssueRequest) (*UpdateOrgAlertIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgAlertIssue not implemented")
}

func RegisterMonitorServiceServer(s grpc1.ServiceRegistrar, srv MonitorServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_MonitorService_serviceDesc(srv, opts...), srv)
}

var _MonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.alert.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "alert.proto",
}

func _get_MonitorService_serviceDesc(srv MonitorServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_MonitorService_QueryCustomizeMetric_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeMetric(ctx, req.(*QueryCustomizeMetricRequest))
	}
	var _MonitorService_QueryCustomizeMetric_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryCustomizeMetric_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryCustomizeMetric", srv)
		_MonitorService_QueryCustomizeMetric_Handler = h.Interceptor(_MonitorService_QueryCustomizeMetric_Handler)
	}

	_MonitorService_QueryCustomizeNotifyTarget_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeNotifyTarget(ctx, req.(*QueryCustomizeNotifyTargetRequest))
	}
	var _MonitorService_QueryCustomizeNotifyTarget_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryCustomizeNotifyTarget_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryCustomizeNotifyTarget", srv)
		_MonitorService_QueryCustomizeNotifyTarget_Handler = h.Interceptor(_MonitorService_QueryCustomizeNotifyTarget_Handler)
	}

	_MonitorService_QueryOrgCustomizeNotifyTarget_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeNotifyTarget(ctx, req.(*QueryOrgCustomizeNotifyTargetRequest))
	}
	var _MonitorService_QueryOrgCustomizeNotifyTarget_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgCustomizeNotifyTarget_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgCustomizeNotifyTarget", srv)
		_MonitorService_QueryOrgCustomizeNotifyTarget_Handler = h.Interceptor(_MonitorService_QueryOrgCustomizeNotifyTarget_Handler)
	}

	_MonitorService_QueryCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryCustomizeAlert(ctx, req.(*QueryCustomizeAlertRequest))
	}
	var _MonitorService_QueryCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryCustomizeAlert", srv)
		_MonitorService_QueryCustomizeAlert_Handler = h.Interceptor(_MonitorService_QueryCustomizeAlert_Handler)
	}

	_MonitorService_GetCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomizeAlert(ctx, req.(*GetCustomizeAlertRequest))
	}
	var _MonitorService_GetCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetCustomizeAlert", srv)
		_MonitorService_GetCustomizeAlert_Handler = h.Interceptor(_MonitorService_GetCustomizeAlert_Handler)
	}

	_MonitorService_GetCustomizeAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetCustomizeAlertDetail(ctx, req.(*GetCustomizeAlertDetailRequest))
	}
	var _MonitorService_GetCustomizeAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetCustomizeAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetCustomizeAlertDetail", srv)
		_MonitorService_GetCustomizeAlertDetail_Handler = h.Interceptor(_MonitorService_GetCustomizeAlertDetail_Handler)
	}

	_MonitorService_CreateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateCustomizeAlert(ctx, req.(*CreateCustomizeAlertRequest))
	}
	var _MonitorService_CreateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateCustomizeAlert", srv)
		_MonitorService_CreateCustomizeAlert_Handler = h.Interceptor(_MonitorService_CreateCustomizeAlert_Handler)
	}

	_MonitorService_UpdateCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlert(ctx, req.(*UpdateCustomizeAlertRequest))
	}
	var _MonitorService_UpdateCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateCustomizeAlert", srv)
		_MonitorService_UpdateCustomizeAlert_Handler = h.Interceptor(_MonitorService_UpdateCustomizeAlert_Handler)
	}

	_MonitorService_UpdateCustomizeAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateCustomizeAlertEnable(ctx, req.(*UpdateCustomizeAlertEnableRequest))
	}
	var _MonitorService_UpdateCustomizeAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateCustomizeAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateCustomizeAlertEnable", srv)
		_MonitorService_UpdateCustomizeAlertEnable_Handler = h.Interceptor(_MonitorService_UpdateCustomizeAlertEnable_Handler)
	}

	_MonitorService_DeleteCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteCustomizeAlert(ctx, req.(*DeleteCustomizeAlertRequest))
	}
	var _MonitorService_DeleteCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_DeleteCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "DeleteCustomizeAlert", srv)
		_MonitorService_DeleteCustomizeAlert_Handler = h.Interceptor(_MonitorService_DeleteCustomizeAlert_Handler)
	}

	_MonitorService_QueryOrgCustomizeMetric_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeMetric(ctx, req.(*QueryOrgCustomizeMetricRequest))
	}
	var _MonitorService_QueryOrgCustomizeMetric_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgCustomizeMetric_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgCustomizeMetric", srv)
		_MonitorService_QueryOrgCustomizeMetric_Handler = h.Interceptor(_MonitorService_QueryOrgCustomizeMetric_Handler)
	}

	_MonitorService_QueryOrgCustomizeAlerts_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgCustomizeAlerts(ctx, req.(*QueryOrgCustomizeAlertsRequest))
	}
	var _MonitorService_QueryOrgCustomizeAlerts_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgCustomizeAlerts_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgCustomizeAlerts", srv)
		_MonitorService_QueryOrgCustomizeAlerts_Handler = h.Interceptor(_MonitorService_QueryOrgCustomizeAlerts_Handler)
	}

	_MonitorService_GetOrgCustomizeAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgCustomizeAlertDetail(ctx, req.(*GetOrgCustomizeAlertDetailRequest))
	}
	var _MonitorService_GetOrgCustomizeAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetOrgCustomizeAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetOrgCustomizeAlertDetail", srv)
		_MonitorService_GetOrgCustomizeAlertDetail_Handler = h.Interceptor(_MonitorService_GetOrgCustomizeAlertDetail_Handler)
	}

	_MonitorService_CreateOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgCustomizeAlert(ctx, req.(*CreateOrgCustomizeAlertRequest))
	}
	var _MonitorService_CreateOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateOrgCustomizeAlert", srv)
		_MonitorService_CreateOrgCustomizeAlert_Handler = h.Interceptor(_MonitorService_CreateOrgCustomizeAlert_Handler)
	}

	_MonitorService_UpdateOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgCustomizeAlert(ctx, req.(*UpdateOrgCustomizeAlertRequest))
	}
	var _MonitorService_UpdateOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateOrgCustomizeAlert", srv)
		_MonitorService_UpdateOrgCustomizeAlert_Handler = h.Interceptor(_MonitorService_UpdateOrgCustomizeAlert_Handler)
	}

	_MonitorService_UpdateOrgCustomizeAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgCustomizeAlertEnable(ctx, req.(*UpdateOrgCustomizeAlertEnableRequest))
	}
	var _MonitorService_UpdateOrgCustomizeAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateOrgCustomizeAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateOrgCustomizeAlertEnable", srv)
		_MonitorService_UpdateOrgCustomizeAlertEnable_Handler = h.Interceptor(_MonitorService_UpdateOrgCustomizeAlertEnable_Handler)
	}

	_MonitorService_DeleteOrgCustomizeAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteOrgCustomizeAlert(ctx, req.(*DeleteOrgCustomizeAlertRequest))
	}
	var _MonitorService_DeleteOrgCustomizeAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_DeleteOrgCustomizeAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "DeleteOrgCustomizeAlert", srv)
		_MonitorService_DeleteOrgCustomizeAlert_Handler = h.Interceptor(_MonitorService_DeleteOrgCustomizeAlert_Handler)
	}

	_MonitorService_QueryDashboardByAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryDashboardByAlert(ctx, req.(*QueryDashboardByAlertRequest))
	}
	var _MonitorService_QueryDashboardByAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryDashboardByAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryDashboardByAlert", srv)
		_MonitorService_QueryDashboardByAlert_Handler = h.Interceptor(_MonitorService_QueryDashboardByAlert_Handler)
	}

	_MonitorService_QueryOrgDashboardByAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgDashboardByAlert(ctx, req.(*QueryOrgDashboardByAlertRequest))
	}
	var _MonitorService_QueryOrgDashboardByAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgDashboardByAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgDashboardByAlert", srv)
		_MonitorService_QueryOrgDashboardByAlert_Handler = h.Interceptor(_MonitorService_QueryOrgDashboardByAlert_Handler)
	}

	_MonitorService_QueryAlertRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertRule(ctx, req.(*QueryAlertRuleRequest))
	}
	var _MonitorService_QueryAlertRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryAlertRule_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryAlertRule", srv)
		_MonitorService_QueryAlertRule_Handler = h.Interceptor(_MonitorService_QueryAlertRule_Handler)
	}

	_MonitorService_QueryAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlert(ctx, req.(*QueryAlertRequest))
	}
	var _MonitorService_QueryAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryAlert", srv)
		_MonitorService_QueryAlert_Handler = h.Interceptor(_MonitorService_QueryAlert_Handler)
	}

	_MonitorService_GetAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlert(ctx, req.(*GetAlertRequest))
	}
	var _MonitorService_GetAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetAlert", srv)
		_MonitorService_GetAlert_Handler = h.Interceptor(_MonitorService_GetAlert_Handler)
	}

	_MonitorService_GetAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertDetail(ctx, req.(*GetAlertDetailRequest))
	}
	var _MonitorService_GetAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetAlertDetail", srv)
		_MonitorService_GetAlertDetail_Handler = h.Interceptor(_MonitorService_GetAlertDetail_Handler)
	}

	_MonitorService_CreateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	var _MonitorService_CreateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateAlert", srv)
		_MonitorService_CreateAlert_Handler = h.Interceptor(_MonitorService_CreateAlert_Handler)
	}

	_MonitorService_UpdateAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	var _MonitorService_UpdateAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateAlert", srv)
		_MonitorService_UpdateAlert_Handler = h.Interceptor(_MonitorService_UpdateAlert_Handler)
	}

	_MonitorService_UpdateAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertEnable(ctx, req.(*UpdateAlertEnableRequest))
	}
	var _MonitorService_UpdateAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateAlertEnable", srv)
		_MonitorService_UpdateAlertEnable_Handler = h.Interceptor(_MonitorService_UpdateAlertEnable_Handler)
	}

	_MonitorService_DeleteAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	var _MonitorService_DeleteAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_DeleteAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "DeleteAlert", srv)
		_MonitorService_DeleteAlert_Handler = h.Interceptor(_MonitorService_DeleteAlert_Handler)
	}

	_MonitorService_QueryOrgAlertRule_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertRule(ctx, req.(*QueryOrgAlertRuleRequest))
	}
	var _MonitorService_QueryOrgAlertRule_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgAlertRule_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgAlertRule", srv)
		_MonitorService_QueryOrgAlertRule_Handler = h.Interceptor(_MonitorService_QueryOrgAlertRule_Handler)
	}

	_MonitorService_QueryOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlert(ctx, req.(*QueryOrgAlertRequest))
	}
	var _MonitorService_QueryOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgAlert", srv)
		_MonitorService_QueryOrgAlert_Handler = h.Interceptor(_MonitorService_QueryOrgAlert_Handler)
	}

	_MonitorService_GetOrgAlertDetail_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertDetail(ctx, req.(*GetOrgAlertDetailRequest))
	}
	var _MonitorService_GetOrgAlertDetail_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetOrgAlertDetail_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetOrgAlertDetail", srv)
		_MonitorService_GetOrgAlertDetail_Handler = h.Interceptor(_MonitorService_GetOrgAlertDetail_Handler)
	}

	_MonitorService_CreateOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgAlert(ctx, req.(*CreateOrgAlertRequest))
	}
	var _MonitorService_CreateOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateOrgAlert", srv)
		_MonitorService_CreateOrgAlert_Handler = h.Interceptor(_MonitorService_CreateOrgAlert_Handler)
	}

	_MonitorService_UpdateOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlert(ctx, req.(*UpdateOrgAlertRequest))
	}
	var _MonitorService_UpdateOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateOrgAlert", srv)
		_MonitorService_UpdateOrgAlert_Handler = h.Interceptor(_MonitorService_UpdateOrgAlert_Handler)
	}

	_MonitorService_UpdateOrgAlertEnable_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlertEnable(ctx, req.(*UpdateOrgAlertEnableRequest))
	}
	var _MonitorService_UpdateOrgAlertEnable_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateOrgAlertEnable_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateOrgAlertEnable", srv)
		_MonitorService_UpdateOrgAlertEnable_Handler = h.Interceptor(_MonitorService_UpdateOrgAlertEnable_Handler)
	}

	_MonitorService_DeleteOrgAlert_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DeleteOrgAlert(ctx, req.(*DeleteOrgAlertRequest))
	}
	var _MonitorService_DeleteOrgAlert_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_DeleteOrgAlert_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "DeleteOrgAlert", srv)
		_MonitorService_DeleteOrgAlert_Handler = h.Interceptor(_MonitorService_DeleteOrgAlert_Handler)
	}

	_MonitorService_GetAlertRecordAttr_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecordAttr(ctx, req.(*GetAlertRecordAttrRequest))
	}
	var _MonitorService_GetAlertRecordAttr_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetAlertRecordAttr_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetAlertRecordAttr", srv)
		_MonitorService_GetAlertRecordAttr_Handler = h.Interceptor(_MonitorService_GetAlertRecordAttr_Handler)
	}

	_MonitorService_QueryAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertRecord(ctx, req.(*QueryAlertRecordRequest))
	}
	var _MonitorService_QueryAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryAlertRecord", srv)
		_MonitorService_QueryAlertRecord_Handler = h.Interceptor(_MonitorService_QueryAlertRecord_Handler)
	}

	_MonitorService_GetAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetAlertRecord(ctx, req.(*GetAlertRecordRequest))
	}
	var _MonitorService_GetAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetAlertRecord", srv)
		_MonitorService_GetAlertRecord_Handler = h.Interceptor(_MonitorService_GetAlertRecord_Handler)
	}

	_MonitorService_QueryAlertHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryAlertHistory(ctx, req.(*QueryAlertHistoryRequest))
	}
	var _MonitorService_QueryAlertHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryAlertHistory_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryAlertHistory", srv)
		_MonitorService_QueryAlertHistory_Handler = h.Interceptor(_MonitorService_QueryAlertHistory_Handler)
	}

	_MonitorService_CreateAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateAlertIssue(ctx, req.(*CreateAlertIssueRequest))
	}
	var _MonitorService_CreateAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateAlertIssue", srv)
		_MonitorService_CreateAlertIssue_Handler = h.Interceptor(_MonitorService_CreateAlertIssue_Handler)
	}

	_MonitorService_UpdateAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateAlertIssue(ctx, req.(*UpdateAlertIssueRequest))
	}
	var _MonitorService_UpdateAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateAlertIssue", srv)
		_MonitorService_UpdateAlertIssue_Handler = h.Interceptor(_MonitorService_UpdateAlertIssue_Handler)
	}

	_MonitorService_GetOrgAlertRecordAttr_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertRecordAttr(ctx, req.(*GetOrgAlertRecordAttrRequest))
	}
	var _MonitorService_GetOrgAlertRecordAttr_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetOrgAlertRecordAttr_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetOrgAlertRecordAttr", srv)
		_MonitorService_GetOrgAlertRecordAttr_Handler = h.Interceptor(_MonitorService_GetOrgAlertRecordAttr_Handler)
	}

	_MonitorService_QueryOrgAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertRecord(ctx, req.(*QueryOrgAlertRecordRequest))
	}
	var _MonitorService_QueryOrgAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgAlertRecord", srv)
		_MonitorService_QueryOrgAlertRecord_Handler = h.Interceptor(_MonitorService_QueryOrgAlertRecord_Handler)
	}

	_MonitorService_QueryOrgHostsAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgHostsAlertRecord(ctx, req.(*QueryOrgHostsAlertRecordRequest))
	}
	var _MonitorService_QueryOrgHostsAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgHostsAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgHostsAlertRecord", srv)
		_MonitorService_QueryOrgHostsAlertRecord_Handler = h.Interceptor(_MonitorService_QueryOrgHostsAlertRecord_Handler)
	}

	_MonitorService_GetOrgAlertRecord_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgAlertRecord(ctx, req.(*GetOrgAlertRecordRequest))
	}
	var _MonitorService_GetOrgAlertRecord_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_GetOrgAlertRecord_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "GetOrgAlertRecord", srv)
		_MonitorService_GetOrgAlertRecord_Handler = h.Interceptor(_MonitorService_GetOrgAlertRecord_Handler)
	}

	_MonitorService_QueryOrgAlertHistory_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.QueryOrgAlertHistory(ctx, req.(*QueryOrgAlertHistoryRequest))
	}
	var _MonitorService_QueryOrgAlertHistory_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_QueryOrgAlertHistory_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "QueryOrgAlertHistory", srv)
		_MonitorService_QueryOrgAlertHistory_Handler = h.Interceptor(_MonitorService_QueryOrgAlertHistory_Handler)
	}

	_MonitorService_CreateOrgAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreateOrgAlertIssue(ctx, req.(*CreateOrgAlertIssueRequest))
	}
	var _MonitorService_CreateOrgAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_CreateOrgAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "CreateOrgAlertIssue", srv)
		_MonitorService_CreateOrgAlertIssue_Handler = h.Interceptor(_MonitorService_CreateOrgAlertIssue_Handler)
	}

	_MonitorService_UpdateOrgAlertIssue_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgAlertIssue(ctx, req.(*UpdateOrgAlertIssueRequest))
	}
	var _MonitorService_UpdateOrgAlertIssue_info transport.ServiceInfo
	if h.Interceptor != nil {
		_MonitorService_UpdateOrgAlertIssue_info = transport.NewServiceInfo("erda.core.monitor.alert.MonitorService", "UpdateOrgAlertIssue", srv)
		_MonitorService_UpdateOrgAlertIssue_Handler = h.Interceptor(_MonitorService_UpdateOrgAlertIssue_Handler)
	}

	var serviceDesc = _MonitorService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "QueryCustomizeMetric",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeMetricRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryCustomizeMetric(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryCustomizeMetric_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryCustomizeMetric_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryCustomizeMetric",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryCustomizeMetric_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeNotifyTarget",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeNotifyTargetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryCustomizeNotifyTarget(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryCustomizeNotifyTarget_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryCustomizeNotifyTarget_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryCustomizeNotifyTarget",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryCustomizeNotifyTarget_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeNotifyTarget",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeNotifyTargetRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgCustomizeNotifyTarget(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgCustomizeNotifyTarget_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgCustomizeNotifyTarget_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeNotifyTarget",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgCustomizeNotifyTarget_Handler)
			},
		},
		{
			MethodName: "QueryCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "GetCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_GetCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_GetCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "GetCustomizeAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetCustomizeAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetCustomizeAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetCustomizeAlertDetail_info)
				}
				if interceptor == nil {
					return _MonitorService_GetCustomizeAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetCustomizeAlertDetail",
				}
				return interceptor(ctx, in, info, _MonitorService_GetCustomizeAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateCustomizeAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateCustomizeAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateCustomizeAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateCustomizeAlertEnable_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateCustomizeAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateCustomizeAlertEnable",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateCustomizeAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).DeleteCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_DeleteCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_DeleteCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/DeleteCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_DeleteCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeMetric",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeMetricRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgCustomizeMetric(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgCustomizeMetric_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgCustomizeMetric_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeMetric",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgCustomizeMetric_Handler)
			},
		},
		{
			MethodName: "QueryOrgCustomizeAlerts",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgCustomizeAlertsRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgCustomizeAlerts(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgCustomizeAlerts_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgCustomizeAlerts_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgCustomizeAlerts",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgCustomizeAlerts_Handler)
			},
		},
		{
			MethodName: "GetOrgCustomizeAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgCustomizeAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetOrgCustomizeAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetOrgCustomizeAlertDetail_info)
				}
				if interceptor == nil {
					return _MonitorService_GetOrgCustomizeAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetOrgCustomizeAlertDetail",
				}
				return interceptor(ctx, in, info, _MonitorService_GetOrgCustomizeAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgCustomizeAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgCustomizeAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateOrgCustomizeAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateOrgCustomizeAlertEnable_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateOrgCustomizeAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateOrgCustomizeAlertEnable",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateOrgCustomizeAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteOrgCustomizeAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteOrgCustomizeAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).DeleteOrgCustomizeAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_DeleteOrgCustomizeAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_DeleteOrgCustomizeAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/DeleteOrgCustomizeAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_DeleteOrgCustomizeAlert_Handler)
			},
		},
		{
			MethodName: "QueryDashboardByAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryDashboardByAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryDashboardByAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryDashboardByAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryDashboardByAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryDashboardByAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryDashboardByAlert_Handler)
			},
		},
		{
			MethodName: "QueryOrgDashboardByAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgDashboardByAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgDashboardByAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgDashboardByAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgDashboardByAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgDashboardByAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgDashboardByAlert_Handler)
			},
		},
		{
			MethodName: "QueryAlertRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryAlertRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryAlertRule_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryAlertRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryAlertRule",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryAlertRule_Handler)
			},
		},
		{
			MethodName: "QueryAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryAlert_Handler)
			},
		},
		{
			MethodName: "GetAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_GetAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_GetAlert_Handler)
			},
		},
		{
			MethodName: "GetAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetAlertDetail_info)
				}
				if interceptor == nil {
					return _MonitorService_GetAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetAlertDetail",
				}
				return interceptor(ctx, in, info, _MonitorService_GetAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateAlert_Handler)
			},
		},
		{
			MethodName: "UpdateAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateAlertEnable_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateAlertEnable",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).DeleteAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_DeleteAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_DeleteAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/DeleteAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_DeleteAlert_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertRule",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRuleRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgAlertRule(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgAlertRule_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgAlertRule_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgAlertRule",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgAlertRule_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgAlert_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertDetail",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertDetailRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetOrgAlertDetail(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetOrgAlertDetail_info)
				}
				if interceptor == nil {
					return _MonitorService_GetOrgAlertDetail_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetOrgAlertDetail",
				}
				return interceptor(ctx, in, info, _MonitorService_GetOrgAlertDetail_Handler)
			},
		},
		{
			MethodName: "CreateOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateOrgAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateOrgAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateOrgAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateOrgAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateOrgAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateOrgAlert_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlertEnable",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertEnableRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateOrgAlertEnable(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateOrgAlertEnable_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateOrgAlertEnable_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateOrgAlertEnable",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateOrgAlertEnable_Handler)
			},
		},
		{
			MethodName: "DeleteOrgAlert",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(DeleteOrgAlertRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).DeleteOrgAlert(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_DeleteOrgAlert_info)
				}
				if interceptor == nil {
					return _MonitorService_DeleteOrgAlert_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/DeleteOrgAlert",
				}
				return interceptor(ctx, in, info, _MonitorService_DeleteOrgAlert_Handler)
			},
		},
		{
			MethodName: "GetAlertRecordAttr",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordAttrRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetAlertRecordAttr(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetAlertRecordAttr_info)
				}
				if interceptor == nil {
					return _MonitorService_GetAlertRecordAttr_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetAlertRecordAttr",
				}
				return interceptor(ctx, in, info, _MonitorService_GetAlertRecordAttr_Handler)
			},
		},
		{
			MethodName: "QueryAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryAlertRecord_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryAlertRecord",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryAlertRecord_Handler)
			},
		},
		{
			MethodName: "GetAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetAlertRecord_info)
				}
				if interceptor == nil {
					return _MonitorService_GetAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetAlertRecord",
				}
				return interceptor(ctx, in, info, _MonitorService_GetAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryAlertHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryAlertHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryAlertHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryAlertHistory_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryAlertHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryAlertHistory",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryAlertHistory_Handler)
			},
		},
		{
			MethodName: "CreateAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateAlertIssue_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateAlertIssue",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateAlertIssue_Handler)
			},
		},
		{
			MethodName: "UpdateAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateAlertIssue_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateAlertIssue",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateAlertIssue_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertRecordAttr",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertRecordAttrRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetOrgAlertRecordAttr(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetOrgAlertRecordAttr_info)
				}
				if interceptor == nil {
					return _MonitorService_GetOrgAlertRecordAttr_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetOrgAlertRecordAttr",
				}
				return interceptor(ctx, in, info, _MonitorService_GetOrgAlertRecordAttr_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgAlertRecord_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgAlertRecord",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryOrgHostsAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgHostsAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgHostsAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgHostsAlertRecord_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgHostsAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgHostsAlertRecord",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgHostsAlertRecord_Handler)
			},
		},
		{
			MethodName: "GetOrgAlertRecord",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(GetOrgAlertRecordRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).GetOrgAlertRecord(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_GetOrgAlertRecord_info)
				}
				if interceptor == nil {
					return _MonitorService_GetOrgAlertRecord_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/GetOrgAlertRecord",
				}
				return interceptor(ctx, in, info, _MonitorService_GetOrgAlertRecord_Handler)
			},
		},
		{
			MethodName: "QueryOrgAlertHistory",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(QueryOrgAlertHistoryRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).QueryOrgAlertHistory(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_QueryOrgAlertHistory_info)
				}
				if interceptor == nil {
					return _MonitorService_QueryOrgAlertHistory_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/QueryOrgAlertHistory",
				}
				return interceptor(ctx, in, info, _MonitorService_QueryOrgAlertHistory_Handler)
			},
		},
		{
			MethodName: "CreateOrgAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreateOrgAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).CreateOrgAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_CreateOrgAlertIssue_info)
				}
				if interceptor == nil {
					return _MonitorService_CreateOrgAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/CreateOrgAlertIssue",
				}
				return interceptor(ctx, in, info, _MonitorService_CreateOrgAlertIssue_Handler)
			},
		},
		{
			MethodName: "UpdateOrgAlertIssue",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgAlertIssueRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(MonitorServiceServer).UpdateOrgAlertIssue(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _MonitorService_UpdateOrgAlertIssue_info)
				}
				if interceptor == nil {
					return _MonitorService_UpdateOrgAlertIssue_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.alert.MonitorService/UpdateOrgAlertIssue",
				}
				return interceptor(ctx, in, info, _MonitorService_UpdateOrgAlertIssue_Handler)
			},
		},
	}
	return &serviceDesc
}
