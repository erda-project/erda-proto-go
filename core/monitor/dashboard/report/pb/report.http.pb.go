// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Source: report.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	http "github.com/erda-project/erda-infra/pkg/transport/http"
	httprule "github.com/erda-project/erda-infra/pkg/transport/http/httprule"
	runtime "github.com/erda-project/erda-infra/pkg/transport/http/runtime"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	http1 "net/http"
	strconv "strconv"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/transport/http" package it is being compiled against.
const _ = http.SupportPackageIsVersion1

// DashboardReportServiceHandler is the server API for DashboardReportService service.
type DashboardReportServiceHandler interface {
	// GET /api/org/report/tasks
	ListOrgReportTasks(context.Context, *ListOrgReportTasksRequest) (*ListOrgReportTasksResponse, error)
	// GET /api/org/report/tasks/{id}
	GetOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*ReportTaskResponse, error)
	// POST /api/org/report/tasks
	CreatOrgReportTask(context.Context, *CreatOrgReportTaskRequest) (*StatusResponse, error)
	// PUT /api/org/report/tasks/{id}
	UpdateOrgReportTask(context.Context, *UpdateOrgReportTaskRequest) (*StatusResponse, error)
	// PUT /api/org/report/tasks/{id}/switch
	SwitchOrgReportTask(context.Context, *SwitchOrgReportTaskRequest) (*StatusResponse, error)
	// DELETE /api/org/report/tasks/{id}
	DelOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*StatusResponse, error)
}

// RegisterDashboardReportServiceHandler register DashboardReportServiceHandler to http.Router.
func RegisterDashboardReportServiceHandler(r http.Router, srv DashboardReportServiceHandler, opts ...http.HandleOption) {
	h := http.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}
	encodeFunc := func(fn func(http1.ResponseWriter, *http1.Request) (interface{}, error)) http.HandlerFunc {
		return func(w http1.ResponseWriter, r *http1.Request) {
			out, err := fn(w, r)
			if err != nil {
				h.Error(w, r, err)
				return
			}
			if err := h.Encode(w, r, out); err != nil {
				h.Error(w, r, err)
			}
		}
	}

	add_ListOrgReportTasks := func(method, path string, fn func(context.Context, *ListOrgReportTasksRequest) (*ListOrgReportTasksResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*ListOrgReportTasksRequest))
		}
		var ListOrgReportTasks_info transport.ServiceInfo
		if h.Interceptor != nil {
			ListOrgReportTasks_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "ListOrgReportTasks", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in ListOrgReportTasksRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				params := r.URL.Query()
				if vals := params["scopeId"]; len(vals) > 0 {
					in.ScopeID = vals[0]
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, ListOrgReportTasks_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_GetOrgReportTask := func(method, path string, fn func(context.Context, *IDOrgReportTaskRequest) (*ReportTaskResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*IDOrgReportTaskRequest))
		}
		var GetOrgReportTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			GetOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "GetOrgReportTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in IDOrgReportTaskRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, GetOrgReportTask_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_CreatOrgReportTask := func(method, path string, fn func(context.Context, *CreatOrgReportTaskRequest) (*StatusResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*CreatOrgReportTaskRequest))
		}
		var CreatOrgReportTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			CreatOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "CreatOrgReportTask", srv)
			handler = h.Interceptor(handler)
		}
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in CreatOrgReportTaskRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, CreatOrgReportTask_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_UpdateOrgReportTask := func(method, path string, fn func(context.Context, *UpdateOrgReportTaskRequest) (*StatusResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*UpdateOrgReportTaskRequest))
		}
		var UpdateOrgReportTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			UpdateOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "UpdateOrgReportTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in UpdateOrgReportTaskRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, UpdateOrgReportTask_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_SwitchOrgReportTask := func(method, path string, fn func(context.Context, *SwitchOrgReportTaskRequest) (*StatusResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*SwitchOrgReportTaskRequest))
		}
		var SwitchOrgReportTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			SwitchOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "SwitchOrgReportTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in SwitchOrgReportTaskRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, SwitchOrgReportTask_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_DelOrgReportTask := func(method, path string, fn func(context.Context, *IDOrgReportTaskRequest) (*StatusResponse, error)) {
		handler := func(ctx context.Context, req interface{}) (interface{}, error) {
			return fn(ctx, req.(*IDOrgReportTaskRequest))
		}
		var DelOrgReportTask_info transport.ServiceInfo
		if h.Interceptor != nil {
			DelOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "DelOrgReportTask", srv)
			handler = h.Interceptor(handler)
		}
		compiler, _ := httprule.Parse(path)
		temp := compiler.Compile()
		pattern, _ := runtime.NewPattern(httprule.SupportPackageIsVersion1, temp.OpCodes, temp.Pool, temp.Verb)
		r.Add(method, path, encodeFunc(
			func(w http1.ResponseWriter, r *http1.Request) (interface{}, error) {
				var in IDOrgReportTaskRequest
				if err := h.Decode(r, &in); err != nil {
					return nil, err
				}
				var input interface{} = &in
				if u, ok := (input).(urlenc.URLValuesUnmarshaler); ok {
					if err := u.UnmarshalURLValues("", r.URL.Query()); err != nil {
						return nil, err
					}
				}
				path := r.URL.Path
				if len(path) > 0 {
					components := strings.Split(path[1:], "/")
					last := len(components) - 1
					var verb string
					if idx := strings.LastIndex(components[last], ":"); idx >= 0 {
						c := components[last]
						components[last], verb = c[:idx], c[idx+1:]
					}
					vars, err := pattern.Match(components, verb)
					if err != nil {
						return nil, err
					}
					for k, val := range vars {
						switch k {
						case "id":
							val, err := strconv.ParseUint(val, 10, 64)
							if err != nil {
								return nil, err
							}
							in.Id = val
						}
					}
				}
				ctx := context.WithValue(r.Context(), http.RequestContextKey, r)
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, DelOrgReportTask_info)
				}
				out, err := handler(ctx, &in)
				if err != nil {
					return out, err
				}
				return out, nil
			}),
		)
	}

	add_ListOrgReportTasks("GET", "/api/org/report/tasks", srv.ListOrgReportTasks)
	add_GetOrgReportTask("GET", "/api/org/report/tasks/{id}", srv.GetOrgReportTask)
	add_CreatOrgReportTask("POST", "/api/org/report/tasks", srv.CreatOrgReportTask)
	add_UpdateOrgReportTask("PUT", "/api/org/report/tasks/{id}", srv.UpdateOrgReportTask)
	add_SwitchOrgReportTask("PUT", "/api/org/report/tasks/{id}/switch", srv.SwitchOrgReportTask)
	add_DelOrgReportTask("DELETE", "/api/org/report/tasks/{id}", srv.DelOrgReportTask)
}
