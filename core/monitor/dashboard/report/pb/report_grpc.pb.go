// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Source: report.proto

package pb

import (
	context "context"
	transport "github.com/erda-project/erda-infra/pkg/transport"
	grpc1 "github.com/erda-project/erda-infra/pkg/transport/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DashboardReportServiceClient is the client API for DashboardReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardReportServiceClient interface {
	ListOrgReportTasks(ctx context.Context, in *ListOrgReportTasksRequest, opts ...grpc.CallOption) (*ListOrgReportTasksResponse, error)
	GetOrgReportTask(ctx context.Context, in *IDOrgReportTaskRequest, opts ...grpc.CallOption) (*ReportTaskResponse, error)
	CreatOrgReportTask(ctx context.Context, in *CreatOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	UpdateOrgReportTask(ctx context.Context, in *UpdateOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SwitchOrgReportTask(ctx context.Context, in *SwitchOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	DelOrgReportTask(ctx context.Context, in *IDOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dashboardReportServiceClient struct {
	cc grpc1.ClientConnInterface
}

func NewDashboardReportServiceClient(cc grpc1.ClientConnInterface) DashboardReportServiceClient {
	return &dashboardReportServiceClient{cc}
}

func (c *dashboardReportServiceClient) ListOrgReportTasks(ctx context.Context, in *ListOrgReportTasksRequest, opts ...grpc.CallOption) (*ListOrgReportTasksResponse, error) {
	out := new(ListOrgReportTasksResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/ListOrgReportTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardReportServiceClient) GetOrgReportTask(ctx context.Context, in *IDOrgReportTaskRequest, opts ...grpc.CallOption) (*ReportTaskResponse, error) {
	out := new(ReportTaskResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/GetOrgReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardReportServiceClient) CreatOrgReportTask(ctx context.Context, in *CreatOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/CreatOrgReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardReportServiceClient) UpdateOrgReportTask(ctx context.Context, in *UpdateOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/UpdateOrgReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardReportServiceClient) SwitchOrgReportTask(ctx context.Context, in *SwitchOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/SwitchOrgReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardReportServiceClient) DelOrgReportTask(ctx context.Context, in *IDOrgReportTaskRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/erda.core.monitor.dashboard.report.DashboardReportService/DelOrgReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardReportServiceServer is the server API for DashboardReportService service.
// All implementations should embed UnimplementedDashboardReportServiceServer
// for forward compatibility
type DashboardReportServiceServer interface {
	ListOrgReportTasks(context.Context, *ListOrgReportTasksRequest) (*ListOrgReportTasksResponse, error)
	GetOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*ReportTaskResponse, error)
	CreatOrgReportTask(context.Context, *CreatOrgReportTaskRequest) (*StatusResponse, error)
	UpdateOrgReportTask(context.Context, *UpdateOrgReportTaskRequest) (*StatusResponse, error)
	SwitchOrgReportTask(context.Context, *SwitchOrgReportTaskRequest) (*StatusResponse, error)
	DelOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*StatusResponse, error)
}

// UnimplementedDashboardReportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDashboardReportServiceServer struct {
}

func (*UnimplementedDashboardReportServiceServer) ListOrgReportTasks(context.Context, *ListOrgReportTasksRequest) (*ListOrgReportTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgReportTasks not implemented")
}
func (*UnimplementedDashboardReportServiceServer) GetOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*ReportTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgReportTask not implemented")
}
func (*UnimplementedDashboardReportServiceServer) CreatOrgReportTask(context.Context, *CreatOrgReportTaskRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatOrgReportTask not implemented")
}
func (*UnimplementedDashboardReportServiceServer) UpdateOrgReportTask(context.Context, *UpdateOrgReportTaskRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgReportTask not implemented")
}
func (*UnimplementedDashboardReportServiceServer) SwitchOrgReportTask(context.Context, *SwitchOrgReportTaskRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchOrgReportTask not implemented")
}
func (*UnimplementedDashboardReportServiceServer) DelOrgReportTask(context.Context, *IDOrgReportTaskRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgReportTask not implemented")
}

func RegisterDashboardReportServiceServer(s grpc1.ServiceRegistrar, srv DashboardReportServiceServer, opts ...grpc1.HandleOption) {
	s.RegisterService(_get_DashboardReportService_serviceDesc(srv, opts...), srv)
}

var _DashboardReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "erda.core.monitor.dashboard.report.DashboardReportService",
	HandlerType: (*DashboardReportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "report.proto",
}

func _get_DashboardReportService_serviceDesc(srv DashboardReportServiceServer, opts ...grpc1.HandleOption) *grpc.ServiceDesc {
	h := grpc1.DefaultHandleOptions()
	for _, op := range opts {
		op(h)
	}

	_DashboardReportService_ListOrgReportTasks_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.ListOrgReportTasks(ctx, req.(*ListOrgReportTasksRequest))
	}
	var _DashboardReportService_ListOrgReportTasks_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_ListOrgReportTasks_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "ListOrgReportTasks", srv)
		_DashboardReportService_ListOrgReportTasks_Handler = h.Interceptor(_DashboardReportService_ListOrgReportTasks_Handler)
	}

	_DashboardReportService_GetOrgReportTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.GetOrgReportTask(ctx, req.(*IDOrgReportTaskRequest))
	}
	var _DashboardReportService_GetOrgReportTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_GetOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "GetOrgReportTask", srv)
		_DashboardReportService_GetOrgReportTask_Handler = h.Interceptor(_DashboardReportService_GetOrgReportTask_Handler)
	}

	_DashboardReportService_CreatOrgReportTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.CreatOrgReportTask(ctx, req.(*CreatOrgReportTaskRequest))
	}
	var _DashboardReportService_CreatOrgReportTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_CreatOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "CreatOrgReportTask", srv)
		_DashboardReportService_CreatOrgReportTask_Handler = h.Interceptor(_DashboardReportService_CreatOrgReportTask_Handler)
	}

	_DashboardReportService_UpdateOrgReportTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.UpdateOrgReportTask(ctx, req.(*UpdateOrgReportTaskRequest))
	}
	var _DashboardReportService_UpdateOrgReportTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_UpdateOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "UpdateOrgReportTask", srv)
		_DashboardReportService_UpdateOrgReportTask_Handler = h.Interceptor(_DashboardReportService_UpdateOrgReportTask_Handler)
	}

	_DashboardReportService_SwitchOrgReportTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.SwitchOrgReportTask(ctx, req.(*SwitchOrgReportTaskRequest))
	}
	var _DashboardReportService_SwitchOrgReportTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_SwitchOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "SwitchOrgReportTask", srv)
		_DashboardReportService_SwitchOrgReportTask_Handler = h.Interceptor(_DashboardReportService_SwitchOrgReportTask_Handler)
	}

	_DashboardReportService_DelOrgReportTask_Handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.DelOrgReportTask(ctx, req.(*IDOrgReportTaskRequest))
	}
	var _DashboardReportService_DelOrgReportTask_info transport.ServiceInfo
	if h.Interceptor != nil {
		_DashboardReportService_DelOrgReportTask_info = transport.NewServiceInfo("erda.core.monitor.dashboard.report.DashboardReportService", "DelOrgReportTask", srv)
		_DashboardReportService_DelOrgReportTask_Handler = h.Interceptor(_DashboardReportService_DelOrgReportTask_Handler)
	}

	var serviceDesc = _DashboardReportService_serviceDesc
	serviceDesc.Methods = []grpc.MethodDesc{
		{
			MethodName: "ListOrgReportTasks",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(ListOrgReportTasksRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).ListOrgReportTasks(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_ListOrgReportTasks_info)
				}
				if interceptor == nil {
					return _DashboardReportService_ListOrgReportTasks_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/ListOrgReportTasks",
				}
				return interceptor(ctx, in, info, _DashboardReportService_ListOrgReportTasks_Handler)
			},
		},
		{
			MethodName: "GetOrgReportTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IDOrgReportTaskRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).GetOrgReportTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_GetOrgReportTask_info)
				}
				if interceptor == nil {
					return _DashboardReportService_GetOrgReportTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/GetOrgReportTask",
				}
				return interceptor(ctx, in, info, _DashboardReportService_GetOrgReportTask_Handler)
			},
		},
		{
			MethodName: "CreatOrgReportTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(CreatOrgReportTaskRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).CreatOrgReportTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_CreatOrgReportTask_info)
				}
				if interceptor == nil {
					return _DashboardReportService_CreatOrgReportTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/CreatOrgReportTask",
				}
				return interceptor(ctx, in, info, _DashboardReportService_CreatOrgReportTask_Handler)
			},
		},
		{
			MethodName: "UpdateOrgReportTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(UpdateOrgReportTaskRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).UpdateOrgReportTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_UpdateOrgReportTask_info)
				}
				if interceptor == nil {
					return _DashboardReportService_UpdateOrgReportTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/UpdateOrgReportTask",
				}
				return interceptor(ctx, in, info, _DashboardReportService_UpdateOrgReportTask_Handler)
			},
		},
		{
			MethodName: "SwitchOrgReportTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(SwitchOrgReportTaskRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).SwitchOrgReportTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_SwitchOrgReportTask_info)
				}
				if interceptor == nil {
					return _DashboardReportService_SwitchOrgReportTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/SwitchOrgReportTask",
				}
				return interceptor(ctx, in, info, _DashboardReportService_SwitchOrgReportTask_Handler)
			},
		},
		{
			MethodName: "DelOrgReportTask",
			Handler: func(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
				in := new(IDOrgReportTaskRequest)
				if err := dec(in); err != nil {
					return nil, err
				}
				if interceptor == nil && h.Interceptor == nil {
					return srv.(DashboardReportServiceServer).DelOrgReportTask(ctx, in)
				}
				if h.Interceptor != nil {
					ctx = context.WithValue(ctx, transport.ServiceInfoContextKey, _DashboardReportService_DelOrgReportTask_info)
				}
				if interceptor == nil {
					return _DashboardReportService_DelOrgReportTask_Handler(ctx, in)
				}
				info := &grpc.UnaryServerInfo{
					Server:     srv,
					FullMethod: "/erda.core.monitor.dashboard.report.DashboardReportService/DelOrgReportTask",
				}
				return interceptor(ctx, in, info, _DashboardReportService_DelOrgReportTask_Handler)
			},
		},
	}
	return &serviceDesc
}
