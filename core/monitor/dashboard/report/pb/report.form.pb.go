// Code generated by protoc-gen-form. DO NOT EDIT.
// Source: report.proto

package pb

import (
	base64 "encoding/base64"
	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
	anypb "google.golang.org/protobuf/types/known/anypb"
	url "net/url"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*StatusResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*IDOrgReportTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgReportTasksRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ListOrgReportTasksResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*CreatOrgReportTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*UpdateOrgReportTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ReportTaskResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*SwitchOrgReportTaskRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DashboardBlock)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ViewConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*ViewConfigItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*View)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Config)(nil)
var _ urlenc.URLValuesUnmarshaler = (*API)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DataConfig)(nil)
var _ urlenc.URLValuesUnmarshaler = (*DataConfigItem)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Notify)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyGroup)(nil)
var _ urlenc.URLValuesUnmarshaler = (*NotifyTarget)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Target)(nil)

// StatusResponse implement urlenc.URLValuesUnmarshaler.
func (m *StatusResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "success":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Success = val
			}
		}
	}
	return nil
}

// IDOrgReportTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *IDOrgReportTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// ListOrgReportTasksRequest implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgReportTasksRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// ListOrgReportTasksResponse implement urlenc.URLValuesUnmarshaler.
func (m *ListOrgReportTasksResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "total":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Total = val
			}
		}
	}
	return nil
}

// CreatOrgReportTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *CreatOrgReportTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeID":
				m.ScopeID = vals[0]
			case "type":
				m.Type = vals[0]
			case "dashboardId":
				m.DashboardId = vals[0]
			case "dashboardBlockTemplate":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
			case "dashboardBlockTemplate.id":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Id = vals[0]
			case "dashboardBlockTemplate.name":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Name = vals[0]
			case "dashboardBlockTemplate.desc":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Desc = vals[0]
			case "dashboardBlockTemplate.scope":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Scope = vals[0]
			case "dashboardBlockTemplate.scopeId":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.ScopeId = vals[0]
			case "dashboardBlockTemplate.viewConfig":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				if m.DashboardBlockTemplate.ViewConfig == nil {
					m.DashboardBlockTemplate.ViewConfig = &ViewConfig{}
				}
			case "dashboardBlockTemplate.dataConfig":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				if m.DashboardBlockTemplate.DataConfig == nil {
					m.DashboardBlockTemplate.DataConfig = &DataConfig{}
				}
			case "dashboardBlockTemplate.createAt":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DashboardBlockTemplate.CreateAt = val
			case "dashboardBlockTemplate.updatedAt":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DashboardBlockTemplate.UpdatedAt = val
			case "dashboardBlockTemplate.version":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Id = vals[0]
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreateAt = val
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "pipelineCronId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PipelineCronId = val
			case "createAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			case "runAtOnce":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.RunAtOnce = val
			}
		}
	}
	return nil
}

// UpdateOrgReportTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *UpdateOrgReportTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "dashboardId":
				m.DashboardId = vals[0]
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Id = vals[0]
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreateAt = val
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			}
		}
	}
	return nil
}

// ReportTaskResponse implement urlenc.URLValuesUnmarshaler.
func (m *ReportTaskResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "name":
				m.Name = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "type":
				m.Type = vals[0]
			case "dashboardId":
				m.DashboardId = vals[0]
			case "dashboardBlockTemplate":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
			case "dashboardBlockTemplate.id":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Id = vals[0]
			case "dashboardBlockTemplate.name":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Name = vals[0]
			case "dashboardBlockTemplate.desc":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Desc = vals[0]
			case "dashboardBlockTemplate.scope":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Scope = vals[0]
			case "dashboardBlockTemplate.scopeId":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.ScopeId = vals[0]
			case "dashboardBlockTemplate.viewConfig":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				if m.DashboardBlockTemplate.ViewConfig == nil {
					m.DashboardBlockTemplate.ViewConfig = &ViewConfig{}
				}
			case "dashboardBlockTemplate.dataConfig":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				if m.DashboardBlockTemplate.DataConfig == nil {
					m.DashboardBlockTemplate.DataConfig = &DataConfig{}
				}
			case "dashboardBlockTemplate.createAt":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DashboardBlockTemplate.CreateAt = val
			case "dashboardBlockTemplate.updatedAt":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.DashboardBlockTemplate.UpdatedAt = val
			case "dashboardBlockTemplate.version":
				if m.DashboardBlockTemplate == nil {
					m.DashboardBlockTemplate = &DashboardBlock{}
				}
				m.DashboardBlockTemplate.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "notifyTarget":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
			case "notifyTarget.type":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.Type = vals[0]
			case "notifyTarget.groupId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.GroupId = val
			case "notifyTarget.groupType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				m.NotifyTarget.GroupType = vals[0]
			case "notifyTarget.notifyGroup":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
			case "notifyTarget.notifyGroup.id":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Id = vals[0]
			case "notifyTarget.notifyGroup.name":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Name = vals[0]
			case "notifyTarget.notifyGroup.scopeType":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeType = vals[0]
			case "notifyTarget.notifyGroup.scopeId":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.ScopeId = vals[0]
			case "notifyTarget.notifyGroup.createAt":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyTarget.NotifyGroup.CreateAt = val
			case "notifyTarget.notifyGroup.creator":
				if m.NotifyTarget == nil {
					m.NotifyTarget = &Notify{}
				}
				if m.NotifyTarget.NotifyGroup == nil {
					m.NotifyTarget.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyTarget.NotifyGroup.Creator = vals[0]
			case "createAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			}
		}
	}
	return nil
}

// SwitchOrgReportTaskRequest implement urlenc.URLValuesUnmarshaler.
func (m *SwitchOrgReportTaskRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			}
		}
	}
	return nil
}

// DashboardBlock implement urlenc.URLValuesUnmarshaler.
func (m *DashboardBlock) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "desc":
				m.Desc = vals[0]
			case "scope":
				m.Scope = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "viewConfig":
				if m.ViewConfig == nil {
					m.ViewConfig = &ViewConfig{}
				}
			case "dataConfig":
				if m.DataConfig == nil {
					m.DataConfig = &DataConfig{}
				}
			case "createAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt = val
			case "updatedAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.UpdatedAt = val
			case "version":
				m.Version = vals[0]
			}
		}
	}
	return nil
}

// ViewConfig implement urlenc.URLValuesUnmarshaler.
func (m *ViewConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// ViewConfigItem implement urlenc.URLValuesUnmarshaler.
func (m *ViewConfigItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "w":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.W = val
			case "h":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.H = val
			case "x":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.X = val
			case "y":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Y = val
			case "i":
				m.I = vals[0]
			case "view":
				if m.View == nil {
					m.View = &View{}
				}
			case "view.title":
				if m.View == nil {
					m.View = &View{}
				}
				m.View.Title = vals[0]
			case "view.description":
				if m.View == nil {
					m.View = &View{}
				}
				m.View.Description = vals[0]
			case "view.chartType":
				if m.View == nil {
					m.View = &View{}
				}
				m.View.ChartType = vals[0]
			case "view.dataSourceType":
				if m.View == nil {
					m.View = &View{}
				}
				m.View.DataSourceType = vals[0]
			case "view.staticData":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.StaticData == nil {
					m.View.StaticData = &anypb.Any{}
				}
			case "view.staticData.type_url":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.StaticData == nil {
					m.View.StaticData = &anypb.Any{}
				}
				m.View.StaticData.TypeUrl = vals[0]
			case "view.staticData.value":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.StaticData == nil {
					m.View.StaticData = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.View.StaticData.Value = val
			case "view.config":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
			case "view.config.dataSourceConfig":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.DataSourceConfig == nil {
					m.View.Config.DataSourceConfig = &anypb.Any{}
				}
			case "view.config.dataSourceConfig.type_url":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.DataSourceConfig == nil {
					m.View.Config.DataSourceConfig = &anypb.Any{}
				}
				m.View.Config.DataSourceConfig.TypeUrl = vals[0]
			case "view.config.dataSourceConfig.value":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.DataSourceConfig == nil {
					m.View.Config.DataSourceConfig = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.View.Config.DataSourceConfig.Value = val
			case "view.config.option":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.Option == nil {
					m.View.Config.Option = &anypb.Any{}
				}
			case "view.config.option.type_url":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.Option == nil {
					m.View.Config.Option = &anypb.Any{}
				}
				m.View.Config.Option.TypeUrl = vals[0]
			case "view.config.option.value":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Config == nil {
					m.View.Config = &Config{}
				}
				if m.View.Config.Option == nil {
					m.View.Config.Option = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.View.Config.Option.Value = val
			case "view.api":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Api == nil {
					m.View.Api = &API{}
				}
			case "view.api.url":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Api == nil {
					m.View.Api = &API{}
				}
				m.View.Api.Url = vals[0]
			case "view.api.method":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Api == nil {
					m.View.Api = &API{}
				}
				m.View.Api.Method = vals[0]
			case "view.controls":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Controls == nil {
					m.View.Controls = &anypb.Any{}
				}
			case "view.controls.type_url":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Controls == nil {
					m.View.Controls = &anypb.Any{}
				}
				m.View.Controls.TypeUrl = vals[0]
			case "view.controls.value":
				if m.View == nil {
					m.View = &View{}
				}
				if m.View.Controls == nil {
					m.View.Controls = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.View.Controls.Value = val
			}
		}
	}
	return nil
}

// View implement urlenc.URLValuesUnmarshaler.
func (m *View) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "title":
				m.Title = vals[0]
			case "description":
				m.Description = vals[0]
			case "chartType":
				m.ChartType = vals[0]
			case "dataSourceType":
				m.DataSourceType = vals[0]
			case "staticData":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
			case "staticData.type_url":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
				m.StaticData.TypeUrl = vals[0]
			case "staticData.value":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.StaticData.Value = val
			case "config":
				if m.Config == nil {
					m.Config = &Config{}
				}
			case "config.dataSourceConfig":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.DataSourceConfig == nil {
					m.Config.DataSourceConfig = &anypb.Any{}
				}
			case "config.dataSourceConfig.type_url":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.DataSourceConfig == nil {
					m.Config.DataSourceConfig = &anypb.Any{}
				}
				m.Config.DataSourceConfig.TypeUrl = vals[0]
			case "config.dataSourceConfig.value":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.DataSourceConfig == nil {
					m.Config.DataSourceConfig = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Config.DataSourceConfig.Value = val
			case "config.option":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.Option == nil {
					m.Config.Option = &anypb.Any{}
				}
			case "config.option.type_url":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.Option == nil {
					m.Config.Option = &anypb.Any{}
				}
				m.Config.Option.TypeUrl = vals[0]
			case "config.option.value":
				if m.Config == nil {
					m.Config = &Config{}
				}
				if m.Config.Option == nil {
					m.Config.Option = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Config.Option.Value = val
			case "api":
				if m.Api == nil {
					m.Api = &API{}
				}
			case "api.url":
				if m.Api == nil {
					m.Api = &API{}
				}
				m.Api.Url = vals[0]
			case "api.method":
				if m.Api == nil {
					m.Api = &API{}
				}
				m.Api.Method = vals[0]
			case "controls":
				if m.Controls == nil {
					m.Controls = &anypb.Any{}
				}
			case "controls.type_url":
				if m.Controls == nil {
					m.Controls = &anypb.Any{}
				}
				m.Controls.TypeUrl = vals[0]
			case "controls.value":
				if m.Controls == nil {
					m.Controls = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Controls.Value = val
			}
		}
	}
	return nil
}

// Config implement urlenc.URLValuesUnmarshaler.
func (m *Config) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "dataSourceConfig":
				if m.DataSourceConfig == nil {
					m.DataSourceConfig = &anypb.Any{}
				}
			case "dataSourceConfig.type_url":
				if m.DataSourceConfig == nil {
					m.DataSourceConfig = &anypb.Any{}
				}
				m.DataSourceConfig.TypeUrl = vals[0]
			case "dataSourceConfig.value":
				if m.DataSourceConfig == nil {
					m.DataSourceConfig = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.DataSourceConfig.Value = val
			case "option":
				if m.Option == nil {
					m.Option = &anypb.Any{}
				}
			case "option.type_url":
				if m.Option == nil {
					m.Option = &anypb.Any{}
				}
				m.Option.TypeUrl = vals[0]
			case "option.value":
				if m.Option == nil {
					m.Option = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.Option.Value = val
			}
		}
	}
	return nil
}

// API implement urlenc.URLValuesUnmarshaler.
func (m *API) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "url":
				m.Url = vals[0]
			case "method":
				m.Method = vals[0]
			}
		}
	}
	return nil
}

// DataConfig implement urlenc.URLValuesUnmarshaler.
func (m *DataConfig) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// DataConfigItem implement urlenc.URLValuesUnmarshaler.
func (m *DataConfigItem) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "i":
				m.I = vals[0]
			case "staticData":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
			case "staticData.type_url":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
				m.StaticData.TypeUrl = vals[0]
			case "staticData.value":
				if m.StaticData == nil {
					m.StaticData = &anypb.Any{}
				}
				val, err := base64.StdEncoding.DecodeString(vals[0])
				if err != nil {
					return err
				}
				m.StaticData.Value = val
			}
		}
	}
	return nil
}

// Notify implement urlenc.URLValuesUnmarshaler.
func (m *Notify) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			case "groupId":
				val, err := strconv.ParseUint(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.GroupId = val
			case "groupType":
				m.GroupType = vals[0]
			case "notifyGroup":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
			case "notifyGroup.id":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyGroup.Id = vals[0]
			case "notifyGroup.name":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyGroup.Name = vals[0]
			case "notifyGroup.scopeType":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyGroup.ScopeType = vals[0]
			case "notifyGroup.scopeId":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyGroup.ScopeId = vals[0]
			case "notifyGroup.createAt":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.NotifyGroup.CreateAt = val
			case "notifyGroup.creator":
				if m.NotifyGroup == nil {
					m.NotifyGroup = &NotifyGroup{}
				}
				m.NotifyGroup.Creator = vals[0]
			}
		}
	}
	return nil
}

// NotifyGroup implement urlenc.URLValuesUnmarshaler.
func (m *NotifyGroup) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				m.Id = vals[0]
			case "name":
				m.Name = vals[0]
			case "scopeType":
				m.ScopeType = vals[0]
			case "scopeId":
				m.ScopeId = vals[0]
			case "createAt":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.CreateAt = val
			case "creator":
				m.Creator = vals[0]
			}
		}
	}
	return nil
}

// NotifyTarget implement urlenc.URLValuesUnmarshaler.
func (m *NotifyTarget) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "type":
				m.Type = vals[0]
			}
		}
	}
	return nil
}

// Target implement urlenc.URLValuesUnmarshaler.
func (m *Target) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "receiver":
				m.Receiver = vals[0]
			case "secret":
				m.Secret = vals[0]
			}
		}
	}
	return nil
}
